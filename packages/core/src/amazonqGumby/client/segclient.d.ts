
/**
 * THIS FILE IS AUTOGENERATED BY 'generateServiceClient.ts'.
 * DO NOT EDIT BY HAND.
 */

import {Request} from 'aws-sdk/lib/request';
import {Response} from 'aws-sdk/lib/response';
import {AWSError} from 'aws-sdk/lib/error';
import {Service} from 'aws-sdk/lib/service';
import {ServiceConfigurationOptions} from 'aws-sdk/lib/service';
import {ConfigBase as Config} from 'aws-sdk/lib/config-base';
interface Blob {}
declare class SEGClient extends Service {
  /**
   * Constructs a service object. This object has one method for each API operation.
   */
  constructor(options?: SEGClient.Types.ClientConfiguration)
  config: Config & SEGClient.Types.ClientConfiguration;
  /**
   * 
   */
  batchGetMessages(params: SEGClient.Types.BatchGetMessagesInput, callback?: (err: AWSError, data: SEGClient.Types.BatchGetMessagesOutput) => void): Request<SEGClient.Types.BatchGetMessagesOutput, AWSError>;
  /**
   * 
   */
  batchGetMessages(callback?: (err: AWSError, data: SEGClient.Types.BatchGetMessagesOutput) => void): Request<SEGClient.Types.BatchGetMessagesOutput, AWSError>;
  /**
   * 
   */
  completeClientAction(params: SEGClient.Types.CompleteClientActionInput, callback?: (err: AWSError, data: SEGClient.Types.CompleteClientActionOutput) => void): Request<SEGClient.Types.CompleteClientActionOutput, AWSError>;
  /**
   * 
   */
  completeClientAction(callback?: (err: AWSError, data: SEGClient.Types.CompleteClientActionOutput) => void): Request<SEGClient.Types.CompleteClientActionOutput, AWSError>;
  /**
   * 
   */
  createDownloadUrl(params: SEGClient.Types.CreateDownloadUrlInput, callback?: (err: AWSError, data: SEGClient.Types.CreateDownloadUrlOutput) => void): Request<SEGClient.Types.CreateDownloadUrlOutput, AWSError>;
  /**
   * 
   */
  createDownloadUrl(callback?: (err: AWSError, data: SEGClient.Types.CreateDownloadUrlOutput) => void): Request<SEGClient.Types.CreateDownloadUrlOutput, AWSError>;
  /**
   * 
   */
  createUploadUrl(params: SEGClient.Types.CreateUploadUrlInput, callback?: (err: AWSError, data: SEGClient.Types.CreateUploadUrlOutput) => void): Request<SEGClient.Types.CreateUploadUrlOutput, AWSError>;
  /**
   * 
   */
  createUploadUrl(callback?: (err: AWSError, data: SEGClient.Types.CreateUploadUrlOutput) => void): Request<SEGClient.Types.CreateUploadUrlOutput, AWSError>;
  /**
   * 
   */
  echo(params: SEGClient.Types.EchoInput, callback?: (err: AWSError, data: SEGClient.Types.EchoOutput) => void): Request<SEGClient.Types.EchoOutput, AWSError>;
  /**
   * 
   */
  echo(callback?: (err: AWSError, data: SEGClient.Types.EchoOutput) => void): Request<SEGClient.Types.EchoOutput, AWSError>;
  /**
   * 
   */
  getClientAction(params: SEGClient.Types.GetClientActionInput, callback?: (err: AWSError, data: SEGClient.Types.GetClientActionOutput) => void): Request<SEGClient.Types.GetClientActionOutput, AWSError>;
  /**
   * 
   */
  getClientAction(callback?: (err: AWSError, data: SEGClient.Types.GetClientActionOutput) => void): Request<SEGClient.Types.GetClientActionOutput, AWSError>;
  /**
   * 
   */
  getTransformBuilder(params: SEGClient.Types.GetTransformBuilderInput, callback?: (err: AWSError, data: SEGClient.Types.GetTransformBuilderOutput) => void): Request<SEGClient.Types.GetTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  getTransformBuilder(callback?: (err: AWSError, data: SEGClient.Types.GetTransformBuilderOutput) => void): Request<SEGClient.Types.GetTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  getTransformDefinition(params: SEGClient.Types.GetTransformDefinitionInput, callback?: (err: AWSError, data: SEGClient.Types.GetTransformDefinitionOutput) => void): Request<SEGClient.Types.GetTransformDefinitionOutput, AWSError>;
  /**
   * 
   */
  getTransformDefinition(callback?: (err: AWSError, data: SEGClient.Types.GetTransformDefinitionOutput) => void): Request<SEGClient.Types.GetTransformDefinitionOutput, AWSError>;
  /**
   * 
   */
  getTransformExec(params: SEGClient.Types.GetTransformExecInput, callback?: (err: AWSError, data: SEGClient.Types.GetTransformExecOutput) => void): Request<SEGClient.Types.GetTransformExecOutput, AWSError>;
  /**
   * 
   */
  getTransformExec(callback?: (err: AWSError, data: SEGClient.Types.GetTransformExecOutput) => void): Request<SEGClient.Types.GetTransformExecOutput, AWSError>;
  /**
   * 
   */
  listClientActions(params: SEGClient.Types.ListClientActionsInput, callback?: (err: AWSError, data: SEGClient.Types.ListClientActionsOutput) => void): Request<SEGClient.Types.ListClientActionsOutput, AWSError>;
  /**
   * 
   */
  listClientActions(callback?: (err: AWSError, data: SEGClient.Types.ListClientActionsOutput) => void): Request<SEGClient.Types.ListClientActionsOutput, AWSError>;
  /**
   * 
   */
  listMessages(params: SEGClient.Types.ListMessagesInput, callback?: (err: AWSError, data: SEGClient.Types.ListMessagesOutput) => void): Request<SEGClient.Types.ListMessagesOutput, AWSError>;
  /**
   * 
   */
  listMessages(callback?: (err: AWSError, data: SEGClient.Types.ListMessagesOutput) => void): Request<SEGClient.Types.ListMessagesOutput, AWSError>;
  /**
   * 
   */
  listTransformDefinitions(params: SEGClient.Types.ListTransformDefinitionsInput, callback?: (err: AWSError, data: SEGClient.Types.ListTransformDefinitionsOutput) => void): Request<SEGClient.Types.ListTransformDefinitionsOutput, AWSError>;
  /**
   * 
   */
  listTransformDefinitions(callback?: (err: AWSError, data: SEGClient.Types.ListTransformDefinitionsOutput) => void): Request<SEGClient.Types.ListTransformDefinitionsOutput, AWSError>;
  /**
   * 
   */
  sendMessage(params: SEGClient.Types.SendMessageInput, callback?: (err: AWSError, data: SEGClient.Types.SendMessageOutput) => void): Request<SEGClient.Types.SendMessageOutput, AWSError>;
  /**
   * 
   */
  sendMessage(callback?: (err: AWSError, data: SEGClient.Types.SendMessageOutput) => void): Request<SEGClient.Types.SendMessageOutput, AWSError>;
  /**
   * 
   */
  startTransformBuilder(params: SEGClient.Types.StartTransformBuilderInput, callback?: (err: AWSError, data: SEGClient.Types.StartTransformBuilderOutput) => void): Request<SEGClient.Types.StartTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  startTransformBuilder(callback?: (err: AWSError, data: SEGClient.Types.StartTransformBuilderOutput) => void): Request<SEGClient.Types.StartTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  startTransformExec(params: SEGClient.Types.StartTransformExecInput, callback?: (err: AWSError, data: SEGClient.Types.StartTransformExecOutput) => void): Request<SEGClient.Types.StartTransformExecOutput, AWSError>;
  /**
   * 
   */
  startTransformExec(callback?: (err: AWSError, data: SEGClient.Types.StartTransformExecOutput) => void): Request<SEGClient.Types.StartTransformExecOutput, AWSError>;
  /**
   * 
   */
  stopTransformBuilder(params: SEGClient.Types.StopTransformBuilderInput, callback?: (err: AWSError, data: SEGClient.Types.StopTransformBuilderOutput) => void): Request<SEGClient.Types.StopTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  stopTransformBuilder(callback?: (err: AWSError, data: SEGClient.Types.StopTransformBuilderOutput) => void): Request<SEGClient.Types.StopTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  stopTransformExec(params: SEGClient.Types.StopTransformExecInput, callback?: (err: AWSError, data: SEGClient.Types.StopTransformExecOutput) => void): Request<SEGClient.Types.StopTransformExecOutput, AWSError>;
  /**
   * 
   */
  stopTransformExec(callback?: (err: AWSError, data: SEGClient.Types.StopTransformExecOutput) => void): Request<SEGClient.Types.StopTransformExecOutput, AWSError>;
  /**
   * 
   */
  updateTransformBuilder(params: SEGClient.Types.UpdateTransformBuilderInput, callback?: (err: AWSError, data: SEGClient.Types.UpdateTransformBuilderOutput) => void): Request<SEGClient.Types.UpdateTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  updateTransformBuilder(callback?: (err: AWSError, data: SEGClient.Types.UpdateTransformBuilderOutput) => void): Request<SEGClient.Types.UpdateTransformBuilderOutput, AWSError>;
  /**
   * 
   */
  updateTransformExec(params: SEGClient.Types.UpdateTransformExecInput, callback?: (err: AWSError, data: SEGClient.Types.UpdateTransformExecOutput) => void): Request<SEGClient.Types.UpdateTransformExecOutput, AWSError>;
  /**
   * 
   */
  updateTransformExec(callback?: (err: AWSError, data: SEGClient.Types.UpdateTransformExecOutput) => void): Request<SEGClient.Types.UpdateTransformExecOutput, AWSError>;
}
declare namespace SEGClient {
  export interface ActionMetadata {
    commandActionMetadata?: CommandActionMetadata;
  }
  export interface ActionResult {
    commandActionResult?: CommandActionResult;
  }
  export type ActionStatus = "PENDING"|"COMPLETE"|string;
  export interface BatchGetMessagesInput {
    context: ExecutionContext;
    messageIds: MessageIds;
  }
  export interface BatchGetMessagesOutput {
    messages?: Messages;
  }
  export interface ClientActionDetail {
    actionId?: Uuid;
    status?: ActionStatus;
    context?: ExecutionContext;
    metadata?: ActionMetadata;
    createdAt?: Timestamp;
  }
  export type ClientActionSummaries = ClientActionSummary[];
  export interface ClientActionSummary {
    actionId: Uuid;
    status: ActionStatus;
    createdAt: Timestamp;
  }
  export interface CommandActionMetadata {
    command: String;
    inputArtifactId: Uuid;
    outputArtifactTypes?: OutputArtifactTypes;
  }
  export interface CommandActionResult {
    exitCode?: Integer;
    outputArtifacts?: OutputArtifacts;
  }
  export interface CompleteClientActionInput {
    context: ExecutionContext;
    actionId: Uuid;
    actionResult: ActionResult;
  }
  export interface CompleteClientActionOutput {
  }
  export type ContentType = "ZIP"|"PDF"|"JSON"|"PLAINTEXT"|string;
  export interface CreateDownloadUrlInput {
    artifactId: Uuid;
  }
  export interface CreateDownloadUrlOutput {
    url?: String;
    headers?: RequestHeaderMap;
    contentType?: ContentType;
  }
  export interface CreateUploadUrlInput {
    sha256Checksum: Sha256Checksum;
    contentType: ContentType;
  }
  export interface CreateUploadUrlOutput {
    artifactId?: Uuid;
    url?: String;
    headers?: RequestHeaderMap;
  }
  export interface EchoInput {
    string?: String;
  }
  export interface EchoOutput {
    string?: String;
  }
  export interface ExecutionContext {
    transformationDefinitionId: String;
    executionId?: String;
  }
  export interface FeedbackRequestContext {
    artifactId: Uuid;
  }
  export interface FileRequestContext {
    requestedFileType: FileType;
  }
  export interface FileResponseContext {
    artifactId: Uuid;
  }
  export type FileType = "ZIP"|"PDF"|"JSON"|"PLAINTEXT"|string;
  export interface GetClientActionInput {
    context: ExecutionContext;
    actionId: Uuid;
  }
  export interface GetClientActionOutput {
    actionDetail: ClientActionDetail;
  }
  export interface GetTransformBuilderInput {
    definitionId: Uuid;
  }
  export interface GetTransformBuilderOutput {
    metadata: TransformBuilderMetadata;
  }
  export interface GetTransformDefinitionInput {
    definitionId: Uuid;
  }
  export interface GetTransformDefinitionOutput {
    metadata: TransformDefinition;
  }
  export interface GetTransformExecInput {
    definitionId: Uuid;
    execId: Uuid;
  }
  export interface GetTransformExecOutput {
    metadata: TransformExecMetadata;
  }
  export type HeaderKey = string;
  export type HeaderValueList = String[];
  export type Integer = number;
  export interface ListClientActionsInput {
    context: ExecutionContext;
    status?: ActionStatus;
    nextToken?: Uuid;
  }
  export interface ListClientActionsOutput {
    actions: ClientActionSummaries;
    nextToken?: Uuid;
  }
  export interface ListMessagesInput {
    context: ExecutionContext;
    startTime: Timestamp;
    sender: Sender;
    nextToken?: String;
  }
  export interface ListMessagesOutput {
    messageIds?: MessageIds;
    nextToken?: String;
  }
  export interface ListTransformDefinitionsInput {
    maxResults?: Integer;
    nextToken?: String;
    status?: TransformBuilderStatus;
  }
  export interface ListTransformDefinitionsOutput {
    definitions?: TransformDefinitions;
    nextToken?: String;
  }
  export interface Message {
    messageId: Uuid;
    sender: Sender;
    content: String;
    timestamp: Timestamp;
    messageContext?: MessageContext;
  }
  export interface MessageContext {
    fileRequestContext?: FileRequestContext;
    fileResponseContext?: FileResponseContext;
    feedbackRequestContext?: FeedbackRequestContext;
  }
  export type MessageIds = Uuid[];
  export type Messages = Message[];
  export interface OutputArtifact {
    artifactType?: OutputArtifactType;
    artifactId?: Uuid;
  }
  export type OutputArtifactType = "LOGS"|string;
  export type OutputArtifactTypes = OutputArtifactType[];
  export type OutputArtifacts = OutputArtifact[];
  export type RequestHeaderMap = {[key: string]: HeaderValueList};
  export interface SendMessageInput {
    context: ExecutionContext;
    textContent: String;
    sender: Sender;
    messageContext?: MessageContext;
  }
  export interface SendMessageOutput {
    messageId?: Uuid;
  }
  export type Sender = "USER"|"SYSTEM"|string;
  export type Sha256Checksum = string;
  export interface StartTransformBuilderInput {
    transformationName?: String;
  }
  export interface StartTransformBuilderOutput {
    definitionId: Uuid;
  }
  export interface StartTransformExecInput {
    definitionId: Uuid;
    inputArtifactId?: Uuid;
    name?: String;
  }
  export interface StartTransformExecOutput {
    jobId: Uuid;
  }
  export interface StopTransformBuilderInput {
    definitionId: Uuid;
  }
  export interface StopTransformBuilderOutput {
  }
  export interface StopTransformExecInput {
    definitionId: Uuid;
    execId: Uuid;
  }
  export interface StopTransformExecOutput {
  }
  export type String = string;
  export type StringList = String[];
  export type Timestamp = Date;
  export interface TransformBuilderMetadata {
    definitionId: Uuid;
    name?: String;
    status?: TransformBuilderStatus;
    inputArtifactIds?: Uuids;
    definition: TransformDefinition;
  }
  export type TransformBuilderStatus = "CREATED"|"RUNNING"|"DRAFTED"|"VALIDATING"|"VALIDATED"|"PUBLISHED"|"STOPPED"|"FAILED"|"DEPRECATED"|"AWAITING_HUMAN_INPUT"|string;
  export interface TransformDefinition {
    definitionId: Uuid;
    summary: String;
    criteria: StringList;
    implementationSteps: StringList;
    validationCriteria: StringList;
  }
  export type TransformDefinitions = TransformDefinition[];
  export interface TransformExecMetadata {
    definitionId: Uuid;
    execId: Uuid;
    name?: String;
    status?: TransformExecStatus;
    inputArtifactId?: Uuid;
    outputArtifactId?: Uuid;
  }
  export type TransformExecStatus = "CREATED"|"ASSESSING"|"TRANSFORMING"|"VALIDATING"|"COMPLETED"|"STOPPED"|"FAILED"|"AWAITING_HUMAN_INPUT"|string;
  export interface UpdateTransformBuilderInput {
    definitionId: Uuid;
    status?: TransformBuilderStatus;
    inputArtifactIds?: Uuids;
    definition?: TransformDefinition;
  }
  export interface UpdateTransformBuilderOutput {
  }
  export interface UpdateTransformExecInput {
    definitionId: Uuid;
    execId: Uuid;
    status?: TransformExecStatus;
    inputArtifact?: Uuid;
    outputArtifact?: Uuid;
  }
  export interface UpdateTransformExecOutput {
  }
  export type Uuid = string;
  export type Uuids = Uuid[];
  /**
   * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
   */
  export type apiVersion = "2018-05-10"|"latest"|string;
  export interface ClientApiVersions {
    /**
     * A string in YYYY-MM-DD format that represents the latest possible API version that can be used in this service. Specify 'latest' to use the latest possible version.
     */
    apiVersion?: apiVersion;
  }
  export type ClientConfiguration = ServiceConfigurationOptions & ClientApiVersions;
  /**
   * Contains interfaces for use with the SEGClient client.
   */
  export import Types = SEGClient;
}
export = SEGClient;

    